-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 10 contains 5 shift/reduce conflicts.
state 14 contains 5 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> UpEntries                           (0)
	UpEntries -> UpEntry                               (1)
	UpEntries -> UpEntries ';' UpEntry                 (2)
	UpEntries -> UpEntries ';'                         (3)
	UpEntries ->                                       (4)
	UpEntry -> Exp '=' Exp                             (5)
	UpEntry -> Atom '#' Exp                            (6)
	Exp -> Swap Exp                                    (7)
	Exp -> '\\' BExp to Exp                            (8)
	Exp -> Atom                                        (9)
	Exp -> ExName                                      (10)
	Exp -> '(' Exp ')'                                 (11)
	Exp -> fn Exps                                     (12)
	Exps ->                                            (13)
	Exps -> Exp Exps                                   (14)
	BExp -> Swap BExp                                  (15)
	BExp -> Atom                                       (16)
	Swap -> '(' Atom ',' Atom ')'                      (17)
	Atom -> at                                         (18)
	ExName -> ex                                       (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	at             { TokenAt $$ }
	'='            { TokenEq }
	'#'            { TokenFresh }
	','            { TokenComma }
	'('            { TokenOB }
	')'            { TokenCB }
	'\\'           { TokenLam }
	to             { TokenTo }
	fn             { TokenFn $$ }
	ex             { TokenEx $$ }
	';'            { TokenSep }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	UpEntries       rules 1, 2, 3, 4
	UpEntry         rules 5, 6
	Exp             rules 7, 8, 9, 10, 11, 12
	Exps            rules 13, 14
	BExp            rules 15, 16
	Swap            rule  17
	Atom            rule  18
	ExName          rule  19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11
	';'            reduce using rule 4
	%eof           reduce using rule 4

	UpEntries      goto state 12
	UpEntry        goto state 2
	Exp            goto state 3
	Swap           goto state 4
	Atom           goto state 5
	ExName         goto state 6

State 1


	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	UpEntry        goto state 2
	Exp            goto state 3
	Swap           goto state 4
	Atom           goto state 5
	ExName         goto state 6

State 2

	UpEntries -> UpEntry .                              (rule 1)

	';'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	UpEntry -> Exp . '=' Exp                            (rule 5)

	'='            shift, and enter state 25


State 4

	Exp -> Swap . Exp                                   (rule 7)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	Exp            goto state 24
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 5

	UpEntry -> Atom . '#' Exp                           (rule 6)
	Exp -> Atom .                                       (rule 9)

	'='            reduce using rule 9
	'#'            shift, and enter state 23


State 6

	Exp -> ExName .                                     (rule 10)

	at             reduce using rule 10
	'='            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'\\'           reduce using rule 10
	fn             reduce using rule 10
	ex             reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 7

	Atom -> at .                                        (rule 18)

	at             reduce using rule 18
	'='            reduce using rule 18
	'#'            reduce using rule 18
	','            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'\\'           reduce using rule 18
	to             reduce using rule 18
	fn             reduce using rule 18
	ex             reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 8

	Exp -> '(' . Exp ')'                                (rule 11)
	Swap -> '(' . Atom ',' Atom ')'                     (rule 17)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	Exp            goto state 21
	Swap           goto state 4
	Atom           goto state 22
	ExName         goto state 6

State 9

	Exp -> '\\' . BExp to Exp                           (rule 8)

	at             shift, and enter state 7
	'('            shift, and enter state 20

	BExp           goto state 17
	Swap           goto state 18
	Atom           goto state 19

State 10

	Exp -> fn . Exps                                    (rule 12)

	at             shift, and enter state 7
			(reduce using rule 13)

	'='            reduce using rule 13
	'('            shift, and enter state 8
			(reduce using rule 13)

	')'            reduce using rule 13
	'\\'           shift, and enter state 9
			(reduce using rule 13)

	fn             shift, and enter state 10
			(reduce using rule 13)

	ex             shift, and enter state 11
			(reduce using rule 13)

	';'            reduce using rule 13
	%eof           reduce using rule 13

	Exp            goto state 14
	Exps           goto state 15
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 11

	ExName -> ex .                                      (rule 19)

	at             reduce using rule 19
	'='            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'\\'           reduce using rule 19
	fn             reduce using rule 19
	ex             reduce using rule 19
	';'            reduce using rule 19
	%eof           reduce using rule 19


State 12

	%start_calc -> UpEntries .                          (rule 0)
	UpEntries -> UpEntries . ';' UpEntry                (rule 2)
	UpEntries -> UpEntries . ';'                        (rule 3)

	';'            shift, and enter state 13
	%eof           accept


State 13

	UpEntries -> UpEntries ';' . UpEntry                (rule 2)
	UpEntries -> UpEntries ';' .                        (rule 3)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11
	';'            reduce using rule 3
	%eof           reduce using rule 3

	UpEntry        goto state 34
	Exp            goto state 3
	Swap           goto state 4
	Atom           goto state 5
	ExName         goto state 6

State 14

	Exps -> Exp . Exps                                  (rule 14)

	at             shift, and enter state 7
			(reduce using rule 13)

	'='            reduce using rule 13
	'('            shift, and enter state 8
			(reduce using rule 13)

	')'            reduce using rule 13
	'\\'           shift, and enter state 9
			(reduce using rule 13)

	fn             shift, and enter state 10
			(reduce using rule 13)

	ex             shift, and enter state 11
			(reduce using rule 13)

	';'            reduce using rule 13
	%eof           reduce using rule 13

	Exp            goto state 14
	Exps           goto state 33
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 15

	Exp -> fn Exps .                                    (rule 12)

	at             reduce using rule 12
	'='            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'\\'           reduce using rule 12
	fn             reduce using rule 12
	ex             reduce using rule 12
	';'            reduce using rule 12
	%eof           reduce using rule 12


State 16

	Exp -> Atom .                                       (rule 9)

	at             reduce using rule 9
	'='            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'\\'           reduce using rule 9
	fn             reduce using rule 9
	ex             reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 17

	Exp -> '\\' BExp . to Exp                           (rule 8)

	to             shift, and enter state 32


State 18

	BExp -> Swap . BExp                                 (rule 15)

	at             shift, and enter state 7
	'('            shift, and enter state 20

	BExp           goto state 31
	Swap           goto state 18
	Atom           goto state 19

State 19

	BExp -> Atom .                                      (rule 16)

	to             reduce using rule 16


State 20

	Swap -> '(' . Atom ',' Atom ')'                     (rule 17)

	at             shift, and enter state 7

	Atom           goto state 30

State 21

	Exp -> '(' Exp . ')'                                (rule 11)

	')'            shift, and enter state 29


State 22

	Exp -> Atom .                                       (rule 9)
	Swap -> '(' Atom . ',' Atom ')'                     (rule 17)

	','            shift, and enter state 28
	')'            reduce using rule 9


State 23

	UpEntry -> Atom '#' . Exp                           (rule 6)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	Exp            goto state 27
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 24

	Exp -> Swap Exp .                                   (rule 7)

	at             reduce using rule 7
	'='            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'\\'           reduce using rule 7
	fn             reduce using rule 7
	ex             reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 25

	UpEntry -> Exp '=' . Exp                            (rule 5)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	Exp            goto state 26
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 26

	UpEntry -> Exp '=' Exp .                            (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 27

	UpEntry -> Atom '#' Exp .                           (rule 6)

	';'            reduce using rule 6
	%eof           reduce using rule 6


State 28

	Swap -> '(' Atom ',' . Atom ')'                     (rule 17)

	at             shift, and enter state 7

	Atom           goto state 36

State 29

	Exp -> '(' Exp ')' .                                (rule 11)

	at             reduce using rule 11
	'='            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'\\'           reduce using rule 11
	fn             reduce using rule 11
	ex             reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


State 30

	Swap -> '(' Atom . ',' Atom ')'                     (rule 17)

	','            shift, and enter state 28


State 31

	BExp -> Swap BExp .                                 (rule 15)

	to             reduce using rule 15


State 32

	Exp -> '\\' BExp to . Exp                           (rule 8)

	at             shift, and enter state 7
	'('            shift, and enter state 8
	'\\'           shift, and enter state 9
	fn             shift, and enter state 10
	ex             shift, and enter state 11

	Exp            goto state 35
	Swap           goto state 4
	Atom           goto state 16
	ExName         goto state 6

State 33

	Exps -> Exp Exps .                                  (rule 14)

	at             reduce using rule 14
	'='            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'\\'           reduce using rule 14
	fn             reduce using rule 14
	ex             reduce using rule 14
	';'            reduce using rule 14
	%eof           reduce using rule 14


State 34

	UpEntries -> UpEntries ';' UpEntry .                (rule 2)

	';'            reduce using rule 2
	%eof           reduce using rule 2


State 35

	Exp -> '\\' BExp to Exp .                           (rule 8)

	at             reduce using rule 8
	'='            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'\\'           reduce using rule 8
	fn             reduce using rule 8
	ex             reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 36

	Swap -> '(' Atom ',' Atom . ')'                     (rule 17)

	')'            shift, and enter state 37


State 37

	Swap -> '(' Atom ',' Atom ')' .                     (rule 17)

	at             reduce using rule 17
	'('            reduce using rule 17
	'\\'           reduce using rule 17
	fn             reduce using rule 17
	ex             reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 11
Number of non-terminals: 9
Number of states: 38
